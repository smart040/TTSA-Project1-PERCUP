{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b9316501-8fe0-4eaf-9574-537c47903ef1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from ripser import ripser\n",
    "from persim import plot_diagrams\n",
    "from sklearn.cluster import KMeans\n",
    "import tadasets\n",
    "from itertools import combinations\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "774abd83-9462-4ee0-ac25-002e00535e9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Functions used\n",
    "\n",
    "def kmeans_downsampling(data, num_points): #Sampling\n",
    "    kmeans = KMeans(n_clusters=num_points, random_state=0).fit(data)\n",
    "    centroids = kmeans.cluster_centers_\n",
    "    return centroids\n",
    "num_points = 100\n",
    "\n",
    "def cupProduct(phi, psi, triangleList): #Compute Cup Product\n",
    "    cupProduct = []\n",
    "    for i in range(len(triangleList)):\n",
    "        phiVal = 0\n",
    "        psiVal = 0\n",
    "        for j in range(len(phi)):\n",
    "            if phi[j][0] == triangleList[i][0] and phi[j][1] == triangleList[i][1]:\n",
    "                phiVal = phi[j][2]\n",
    "                break;\n",
    "        for k in range(len(psi)):\n",
    "            if psi[k][0] == triangleList[i][1] and psi[k][1] == triangleList[i][2]:\n",
    "                psiVal = psi[k][2]\n",
    "                break;\n",
    "        cupProduct.append(phiVal * psiVal)\n",
    "    cupProduct = np.array(cupProduct).T\n",
    "    return cupProduct\n",
    "\n",
    "def reductionAlgorithm(R):\n",
    "    numRows = len(R[0])\n",
    "    V = np.eye(numRows)\n",
    "    pivotRows, pivotEntries = [[] for i in range (numRows)], [[] for i in range (numRows)]\n",
    "\n",
    "    for i in range(numRows):\n",
    "        h = 0\n",
    "        while (h == 0):\n",
    "            pivotRow = np.inf\n",
    "            for j in range(numRows - 1, -1, -1):\n",
    "                if R[j][i] != 0:\n",
    "                    pivotRow = j\n",
    "                    break;\n",
    "            if pivotRow == np.inf:\n",
    "                pivotEntries[i] = 0\n",
    "            else:\n",
    "                pivotEntries[i] = R[pivotRow][i]\n",
    "            pivotRows[i] = pivotRow\n",
    "            if pivotRow == np.inf or all(pivotRows[k] != pivotRows[i] for k in range(i)):\n",
    "                h = 1\n",
    "                break;\n",
    "            for k in range(i):\n",
    "                if pivotRows[k] == pivotRows[i]:\n",
    "                    c = pivotEntries[i] // pivotEntries[k]\n",
    "                    for l in range(numRows):\n",
    "                        R[l][i] -= c * R[l][k]\n",
    "                        V[l][i] -= c * V[l][k]            \n",
    "    return R\n",
    "\n",
    "def checkSolution(A, b):\n",
    "    # Calculate the rank of the augmented matrix [A | b]\n",
    "    augmented_matrix = np.column_stack((A, b))\n",
    "    rank_A = np.linalg.matrix_rank(A)\n",
    "    rank_augmented = np.linalg.matrix_rank(augmented_matrix)\n",
    "    num_columns = A.shape[1]\n",
    "    num_rows = A.shape[0]\n",
    "    if rank_A == rank_augmented:\n",
    "        if rank_A == num_columns:\n",
    "            return 1\n",
    "        elif rank_A < num_columns:\n",
    "            return 1\n",
    "    else:\n",
    "        if rank_A < rank_augmented:\n",
    "            return 0\n",
    "    return \"Unable to determine the solution status.\"\n",
    "\n",
    "def rowDetect(A, b):\n",
    "    iMax = len(A) + 1\n",
    "    iMin = 1\n",
    "    i = len(A) // 2\n",
    "    running = True\n",
    "    while(running):\n",
    "        sol = checkSolution(A[-i:], b[-i:])\n",
    "        if sol == 0:\n",
    "            if checkSolution(A[-(i - 1):], b[-(i - 1):]) == 1:\n",
    "                row = len(A) - i\n",
    "                running = False\n",
    "                break;\n",
    "            else:\n",
    "                if i < iMax:\n",
    "                    iMax = i\n",
    "                    i = (iMax + iMin) // 2\n",
    "        if sol == 1:\n",
    "            if i > iMin:\n",
    "                iMin = i\n",
    "                i = (iMax + iMin) // 2\n",
    "    return row+1\n",
    "\n",
    "def rowTriangle(r):\n",
    "    value=len(triangles)-1-r\n",
    "    return triangles[value]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e59918ad-b62b-4826-8a9a-5f62b58c6a55",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Generate a shape\n",
    "\n",
    "np.random.seed(2) #This for a torus\n",
    "n_data = 25000\n",
    "R = 5\n",
    "r = 2\n",
    "data = np.zeros((3, n_data))\n",
    "s = np.random.rand(n_data)*2*np.pi\n",
    "t = np.random.rand(n_data)*2*np.pi\n",
    "data[0] = (R + r*np.cos(s))*np.cos(t)\n",
    "data[1] = (R + r*np.cos(s))*np.sin(t)\n",
    "data[2] = r*np.sin(s)\n",
    "data += 0.1*np.random.randn(*data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "93df142b-8eca-43ef-95ba-27a391a3501f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/austinmbaye/anaconda3/lib/python3.10/site-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time Elapsed = 70.39373803138733\n"
     ]
    }
   ],
   "source": [
    "start_time=time.time()\n",
    "\n",
    "#Part 1: Get the Cup Product\n",
    "x = kmeans_downsampling(data.T, 100)\n",
    "result = ripser(x, coeff=2, do_cocycles=True)\n",
    "diagrams = result['dgms']\n",
    "cocycles = result['cocycles'] #all of the cocycles\n",
    "D = result['dperm2all'] #distance matrix between the ith and jth points in the data\n",
    "dgm1 = diagrams[1]\n",
    "#Representative cocycle phi\n",
    "idx1 = np.argmax(dgm1[:, 1] - dgm1[:, 0])\n",
    "cocycle1 = cocycles[1][idx1]\n",
    "#Representative cocycle psi\n",
    "sorted_indices = np.argsort(dgm1[:, 1] - dgm1[:, 0])\n",
    "idx2 = sorted_indices[-2]\n",
    "cocycle2 = cocycles[1][idx2]\n",
    "\n",
    "#Restrict cocycle1\n",
    "New_cocycle1=[]\n",
    "edges=[]\n",
    "for i in range(len(cocycle1)):\n",
    "        for j in range(len(cocycle2)):\n",
    "            if np.array_equal(cocycle1[i:i-1, :2], cocycle1[i:i+1, :2], cocycle2[j:j+1, :2]):  \n",
    "                New_cocycle1.append(cocycle2[j:j+1])\n",
    "        New_cocycle1.append(cocycle2[i:i+1])        \n",
    "rcocycle1=np.vstack(New_cocycle1)\n",
    "for i in range(len(cocycle1)):\n",
    "        for j in range(len(cocycle2)):\n",
    "            if np.array_equal(cocycle1[i-1:i, :2], cocycle2[j:j+1, :2]):\n",
    "                edges.append(cocycle2[j:j+1])        \n",
    "edges=np.vstack(edges)\n",
    "for i in range(len(rcocycle1)):\n",
    "    found_match = False\n",
    "    for j in range(len(edges)):\n",
    "        if np.array_equal(rcocycle1[i, :2], edges[j, :2]):\n",
    "            found_match = True\n",
    "            break\n",
    "    if not found_match:\n",
    "        rcocycle1[i, -1] = 0\n",
    "        \n",
    "# Finding the representative cocycles for triangles\n",
    "representative_cocycles = []\n",
    "for i in range(len(dgm1)):\n",
    "    birth, death = dgm1[i]\n",
    "    if birth != death:  # ignore points on the diagonal\n",
    "        cocycle = cocycles[1][i]\n",
    "        representative_cocycles.append(cocycle)\n",
    "triangles = []\n",
    "for cocycle in representative_cocycles:\n",
    "    edge_indices = cocycle[:, :2].astype(int)\n",
    "    triangle_vertices = set()\n",
    "    for i, j in edge_indices:\n",
    "        triangle_vertices.add(i)\n",
    "        triangle_vertices.add(j)\n",
    "    triangle_combinations = combinations(triangle_vertices, 3)\n",
    "    for combination in triangle_combinations:\n",
    "        triangles.append(list(combination))\n",
    "t=np.vstack(triangles)\n",
    "\n",
    "cup=cupProduct(rcocycle1,cocycle2, t)#Compute the cup Product\n",
    "cup=np.vstack(cup)\n",
    "\n",
    "#Part 2: Get the Coboundary Matrix\n",
    "edges = []\n",
    "vertices=[]\n",
    "representative_cocycles = []\n",
    "for i in range(len(dgm1)):\n",
    "    birth, death = dgm1[i]\n",
    "    if birth != death:  \n",
    "        cocycle = cocycles[1][i]\n",
    "        representative_cocycles.append(cocycle)\n",
    "for cocycle in representative_cocycles: # Extracting every edge as an array of vertices\n",
    "    edge_indices = cocycle[:, :2].astype(int)\n",
    "    for i, j in edge_indices:\n",
    "        edge = [i, j]\n",
    "        edges.append(edge)\n",
    "for cocycle in representative_cocycles: #Extracting every vertex\n",
    "    vertex_indices = cocycle[:, :1].astype(int)\n",
    "    for i in vertex_indices:\n",
    "        vertices.append(i[0])\n",
    "vertices = list(set(vertices)) # Remove duplicate vertices by converting the list to a set and then back to a list\n",
    "\n",
    "ne = len(edges)\n",
    "nt = len(triangles)\n",
    "nv = len(vertices)\n",
    "num_rows= ne+nt+nv\n",
    "num_cols=ne+nt+nv\n",
    "boundary_matrix=np.zeros((num_rows, num_cols), dtype=int)\n",
    "for i,edge in enumerate(edges):\n",
    "    a,b=edge #a and b are the two verticies that make up the edge\n",
    "    for j,vertex in enumerate(vertices):\n",
    "        c=vertex # c is a vertex\n",
    "        if b == c:\n",
    "            boundary_matrix[nv+i,j]=1\n",
    "        if a == c:\n",
    "            boundary_matrix[nv+i,j]=-1\n",
    "for i, triangle in enumerate(triangles):\n",
    "    e,f,g=triangle #e,f,g are verticies in the triangle\n",
    "    for j,edge in enumerate(edges):\n",
    "        h,k=edge \n",
    "        if (h,k) == (e,f):\n",
    "            boundary_matrix[(ne+nv)+i,nv+j]=1\n",
    "        if (h,k) == (f,g):\n",
    "            boundary_matrix[(ne+nv)+i,nv+j]=1\n",
    "        if (h,k) == (e,g):\n",
    "            boundary_matrix[(ne+nv)+i,nv+j]=-1\n",
    "boundary_matrix=boundary_matrix.T\n",
    "#Convert Boundary Matrix into Coboundary\n",
    "restricted_matrix = boundary_matrix[nv:nv + ne, nv + ne:len(boundary_matrix)]\n",
    "coboundary_matrix = np.flip(restricted_matrix).T\n",
    "\n",
    "#Part 3: Solve for x\n",
    "reduce=reductionAlgorithm(coboundary_matrix) #Reduce Coboundary Matrix\n",
    "detect=rowDetect(reduce, cup) #detect row when matrix no longer has a solution\n",
    "tri=rowTriangle(detect) #Obtain associated triangle with the detected row\n",
    "sorted_indices = np.argsort(dgm1[:, 1] - dgm1[:, 0])\n",
    "idx = sorted_indices[-2]\n",
    "h = max(dgm1[idx, 0], dgm1[idx, 0])\n",
    "while h < min(dgm1[idx, 1], dgm1[idx, 1]):\n",
    "    newRun = ripser(x, coeff=2, thresh = h, do_cocycles = True)\n",
    "    newDiagrams = newRun['dgms']\n",
    "    newCocycles = newRun['cocycles']\n",
    "    D = newRun['dperm2all']\n",
    "    dgmNew = newDiagrams[1]\n",
    "    new_representative_cocycles = []\n",
    "    for i in range(len(dgmNew)):\n",
    "        birth, death = dgmNew[i]\n",
    "        if birth != death:  # ignore points on the diagonal\n",
    "            newCocycle = newCocycles[1][i]\n",
    "            new_representative_cocycles.append(newCocycle)\n",
    "    newTriangles = []\n",
    "    for newCocycle in new_representative_cocycles:\n",
    "        edge_indices = newCocycle[:, :2].astype(int)\n",
    "        new_triangle_vertices = set()\n",
    "        for i, j in edge_indices:\n",
    "            new_triangle_vertices.add(i)\n",
    "            new_triangle_vertices.add(j)\n",
    "        new_triangle_combinations = combinations(new_triangle_vertices, 3)\n",
    "        for combination in new_triangle_combinations:\n",
    "            newTriangles.append(list(combination))\n",
    "    t=np.vstack(newTriangles)\n",
    "    for k in range(len(t)):\n",
    "        if t[k][0] == tri[0] and t[k][1] == tri[1] and t[k][2] == tri[2]:\n",
    "            death=h #Gives the Cohomological death \n",
    "            h = 1000000\n",
    "            break;\n",
    "    h += 0.1\n",
    "\n",
    "#Part 4: Plot the persistence diagram with the new point\n",
    "birth=dgm1[idx2,1] #death of psi but birth of H2 point \n",
    "plot_diagrams(diagrams, show = False)\n",
    "plt.scatter(dgm1[0], dgm1[1], 20)\n",
    "plt.scatter(death,birth, color='g')\n",
    "plt.title(\"Peristence Diagram\")\n",
    "plt.show()\n",
    "end_time=(time.time()-start_time)\n",
    "print(\"Time Elapsed =\",end_time)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
